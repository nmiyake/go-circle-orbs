version: 2.1

commands:
  write-go-version-file:
    description: |
      Writes a file at the location specified by the go-version-file-path parameter that contains the version of Go that
      should be used by commands. If a non-empty version is specified as a parameter, that value is used. Otherwise, the
      content of the file at .palantir/go-version or /usr/local/go/VERSION is used. If no parameter is specified and
      none of these files exist, the command fails with an error.
    parameters:
      go-version-file-path:
        description: |
          Path at which the Go version file should be written.
        type: string
        default: "/go/circleci/goversion"
      go-version:
        description: |
          If non-empty, this value is written as the Go version (files in the repository/image are not consulted). The
          version should be of the form specified in a Go distribution's VERSION file (for example, "go1.16.5").
        type: string
        default: ""
    steps:
      - run:
          name: Writing go version to use in CircleCI job
          command: |
            # set Go version
            GO_VERSION="<<parameters.go-version>>"
            if [ ! -z "$GO_VERSION" ]; then
              echo "Go version specified as parameter is ${GO_VERSION}"
            elif [ -f ".palantir/go-version" ]; then
              GO_VERSION=$(cat ".palantir/go-version")
              echo "Go version specified in .palantir/go-version is ${GO_VERSION}"
            elif [ -f "/usr/local/go/VERSION" ]; then
              GO_VERSION=$(cat "/usr/local/go/VERSION")
              echo "Go version specified in /usr/local/go/VERSION is ${GO_VERSION}"
            else
              echo "Error: Go version was not specified as a parameter and neither .palantir/go-version nor /usr/local/go/VERSION exist"
              exit 1
            fi
            mkdir -p "$(dirname <<parameters.go-version-file-path>>)"
            echo "Writing ${GO_VERSION} to <<parameters.go-version-file-path>>"
            printf "%s" "$GO_VERSION" >> "<<parameters.go-version-file-path>>"

  setup-cache:
    description: |
      Writes a file at the location specified by the go-version-file-path parameter that contains the version of Go that
      should be used by commands. If a non-empty version is specified as a parameter, that value is used. Otherwise, the
      content of the file at .palantir/go-version or /usr/local/go/VERSION is used. If no parameter is specified and
      none of these files exist, the command fails with an error.
    parameters:
      go-version-file-path:
        description: |
          Path at which the Go version file is expected.
        type: string
        default: "/go/circleci/goversion"
      go-dist-download-url-prefix:
        description: |
          Prefix of the download URL that should be used to download the Golang distribution. The prefix is joined with
          the desired Go distribution file (for example, "go1.16.5.linux-amd64.tar.gz").
        type: string
        default: "https://golang.org/dl/"
    steps:
      - run:
          name: Download go distribution and install standard libraries
          command: |
            # set Go version
            GO_VERSION="$(cat <<parameters.go-version-file-path>>)"

            # desired distribution already exists: nothing to do
            if [ -d "/go/go-dists/${GO_VERSION}" ]; then
              echo "/go/go-dists/${GO_VERSION} exists: nothing to do"
              exit
            elif [ -d "/go/circle-cache/go-dists/${GO_VERSION}" ]; then
              # Desired distribution restored from cache: move to expected location
              echo "/go/go-dists/${GO_VERSION} does not exist, but /go/circle-cache/go-dists/${GO_VERSION} exists: move to expected location"
              mkdir -p /go/go-dists
              mv "/go/circle-cache/go-dists/${GO_VERSION}" "/go/go-dists/${GO_VERSION}"
              exit
            fi

            # Desired distribution does not already exist and is not in cache: download and ensure that it exists in
            # location that will be cached and in expected location
            echo "Neither /go/go-dists/${GO_VERSION} nor /go/circle-cache/go-dists/${GO_VERSION} exist"
            echo "Downloading golang distribution..." && wget -q <<parameters.go-dist-download-url-prefix>>${GO_VERSION}.linux-amd64.tar.gz
            echo "Expanding archive" && tar xf ${GO_VERSION}.linux-amd64.tar.gz
            echo "Removing archive" && rm ${GO_VERSION}.linux-amd64.tar.gz
            echo "Creating /go/circle-cache/go-dists directory" && mkdir -p /go/circle-cache/go-dists
            echo "Moving expanded Go distribution to /go/circle-cache/go-dists/${GO_VERSION}" && mv go /go/circle-cache/go-dists/${GO_VERSION}
            echo "Creating /go/go-dists directory" && mkdir -p /go/go-dists
            echo "Copying expanded Go distribution to /go/go-dists/${GO_VERSION}" && cp -r /go/circle-cache/go-dists/${GO_VERSION} /go/go-dists/${GO_VERSION}
            echo "Setting working directory to /go to ensure that 'install std' command doesn't use local go.mod file" && cd /go
            echo "Running go install std for linux-amd64" && GOOS=linux GOARCH=amd64 /go/go-dists/${GO_VERSION}/bin/go install std
            echo "Running go install std for linux-arm64" && GOOS=linux GOARCH=arm64 /go/go-dists/${GO_VERSION}/bin/go install std
            echo "Running go install std for darwin-amd64" && GOOS=darwin GOARCH=amd64 /go/go-dists/${GO_VERSION}/bin/go install std
            echo "Running go install std for darwin-arm64" && GOOS=darwin GOARCH=arm64 /go/go-dists/${GO_VERSION}/bin/go install std
            echo "Running go install std for windows-amd64" && GOOS=windows GOARCH=amd64 /go/go-dists/${GO_VERSION}/bin/go install std

  setup-symlink:
    description: |
      Sets up a symlink from /usr/local/go -> /go/go-dists/${GO_VERSION}
    parameters:
      go-version-file-path:
        description: |
          Path at which the Go version file is expected.
        type: string
        default: "/go/circleci/goversion"
    steps:
      - run:
          name: Set up symlink from /usr/local/go -> /go/go-dists/${GO_VERSION}
          command: |
            # set Go version
            GO_VERSION="$(cat <<parameters.go-version-file-path>>)"
            echo "GO_VERSION=${GO_VERSION}"

            sudo rm -rf /usr/local/go
            sudo ln -s /go/go-dists/${GO_VERSION} /usr/local/go

jobs:
  verify:
    working_directory: /go/src/github.com/nmiyake/go-circle-orbs
    docker:
      - image: golang:1.16.5
    steps:
      - checkout
      - write-go-version-file:
          go-version: go1.15.11
      - setup-cache
      - setup-symlink
      - run: go version

workflows:
  version: 2
  verify-dist-publish:
    jobs:
      - verify
